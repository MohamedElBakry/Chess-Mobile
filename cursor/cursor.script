local rendercam = require "rendercam.rendercam"
require "utils-module.utils"

SCALE = 0.45
function init(self)
	-- Listen for input
	msg.post(".", "acquire_input_focus")

	self.collision_id = nil 
	self.dragged_id = nil  
	self.dragged_pos = nil 
	self.pressed = false  
end


function update(self, dt)

	-- 'Nilify' the collision id
	self.collision_id = nil
end


function on_message(self, message_id, message, sender)

	-- On collision, set the collision_id to be the highest z object (closest to the screen)
	if message_id == hash("collision_response") then
		-- print(self.collision_id)
		if not self.collision_id or
		go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
		end
	end
end


function on_input(self, action_id, action)

	-- Only listen for 'touch' actions e.g. mouseclick and screen tap
	if not action_id or action_id == hash("touch") then

		-- Match the position of the 'fake' cursor game object to the real 'cursor'
		local action_pos = rendercam.screen_to_world_2d(action.screen_x, action.screen_y)
		go.set_position(action_pos)

		if action.pressed then
			msg.post("#collisionobject", "enable")
			self.pressed = true

		-- Drop and centre a piece on the square it's being hovered over
		elseif action.released then

			-- Get the board coordinates from the click/tap position
			local action_pos = rendercam.screen_to_world_2d(action.screen_x, action.screen_y)
			-- print(action_pos.x, action_pos.y, action.x, action.y)
			
			-- local board_coords = utils.px_to_xy({action.x, action.y})
			local board_coords = utils.px_to_xy({action_pos.x, action_pos.y})
			
			-- print("Cursor board_coords:", board_coords[1], board_coords[2])
			-- print("Dragged ID", self.dragged_id)
			
			-- Send a message to main asking if this is a valid move
			msg.post("/go_board#main", "is_valid", {id={self.dragged_id, {board_coords[1], board_coords[2]}}})

			-- Multiply them by the square size to find the x y pos
			local y = utils.get_px_from(utils.arr_coords[board_coords[1]]) -- Convert back from array coordinates to true coordiantes
			local x = utils.get_px_from(board_coords[2])
			-- print(x, y)
			go.set_position(vmath.vector3(x, y, 0), self.collision_id)

			
			msg.post("#collisionobject", "disable")
			self.pressed = false
			self.dragged_id = nil
		end

		-- On collision with an object, if we're not already dragging one, pick up and drag this object
		if self.pressed and self.collision_id and not self.dragged_id then
			self.dragged_id = self.collision_id
			self.dragged_pos = action_pos

			-- Increase the scale of the dragged object
			local s2 = SCALE + 0.1
			go.set_scale(s2, self.collision_id)
		end

		
		-- Update the pos as we drag it
		if self.dragged_id then
			go.set_position(action_pos, self.dragged_id)
		end
		
	end
end
