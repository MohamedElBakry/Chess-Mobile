local utils = utils or require "utils-module.utils"
local piece = piece or require "piece.piece"
local rendercam = require "rendercam.rendercam"
local ai = ai or require "game.ai"

local piece_array = {}

local GAME_STATE = utils.enum({"START", "END", "TURN_WHITE", "TURN_BLACK", "WIN_WHITE", "WIN_BLACK", "STALEMATE"})
local current_state = GAME_STATE.TURN_WHITE

-- Keeps track of the last moved piece for (w)hite and (b)lack, so we can determine if en passant is truly valid
-- See @function Piece:__isvalid_pawn
local team_colour = {
	["w"] = {last_moved_piece_id = nil}, 
	["b"] = {last_moved_piece_id = nil}
}


function init(self)
	msg.post(".", "acquire_input_focus")
end


function on_message(self, message_id, message)
	print("MESSAGE:", message_id, message.id)
	if message_id == hash("piece_array") then
		piece_array = message.id

		-- Loop through the piece array and replace 'constructor' tables with Piece function-objects
		for x, row in ipairs(piece_array) do
			for y, piece_table in ipairs(row) do
				local piece = utils.deepcopy(Piece:new(piece_table["id"], piece_table["name"], {x, y}, false))
				
				-- Replace the piece_table with the Piece function-object
				piece_array[x][y] = piece
				
			end
		end
		
		-- Cycle through all possible permutations up to depth n, and cancel the timer once reached
		-- Chess Engine Performance test
		-- handle = timer.delay(0, true, function()
		-- 	if coroutine.status(ai.co) == "suspended" then
		-- 		print("positions calculated: ******", coroutine.resume(ai.co, 2, piece_array, team_colour))
		-- 		-- show(piece_array)
		-- 	else
		-- 		timer.cancel(handle)
		-- 	end
		-- end)
		
		-- print(ai.search(2, piece_array), "<---- SEARCH RESULT")
	end
	
	-- Move Validation
	if message_id == hash("is_valid") then

		-- Get piece
		go_id = message.id[1]
		local move_from = get_piece_location(go_id)
		local move_to = message.id[2]
		print(move_from[1], move_from[2], "-->", move_to[1], move_to[2])

		-- Error check
		if move_from[1] == nil then
			print("move_from is nil... returning")
			return
		end

		-- Out of bounds check
		if (move_to[1] < 1 or move_to[1] > 8) or (move_to[2] < 1 or move_to[2] > 8) then
			piece_array[move_from[1]][move_from[2]]:centre()
			-- centre(move_from, go_id, piece_array[move_from[1]][move_from[2]].scale)
			print("Out of bounds")
			return
		end
		
		-- Get the piece
		local piece = utils.deepcopy(piece_array[move_from[1]][move_from[2]])
		
		local valid, flag = piece:isValid(move_to, piece_array)
		print("VALIDITY:", valid, "FLAG:", flag)

		-- The king being in check overrides any move validation unless it's the king moving out of check
		-- as the king validation function would prevent that from happening
		if valid then
			valid = is_king_not_checkable(valid, move_to, piece, piece_array, flag)
		end
		
		-- Final check that overrides all other checks to see if the correct team is moving a piece
		current_state, valid = get_turn(current_state, valid, piece.colour)
		
		if valid then
			get_king(piece.colour, piece_array).isChecked = false
		end

		if valid == false then
			piece:centre()
			show(piece_array)
			return
		end

		piece:move(move_to, flag, piece_array, team_colour)

		-- Track the last moved piece for en passant
		team_colour[piece.colour]["last_moved_piece_id"] = piece.id

		-- CHECKMATE?
		-- If the enemy king is in check, and has no valid moves,
		-- and there are no moves by his pieces that will put him out of check, then there's a winner
		local game_over, additional_flag = is_checkmate_or_stalemate(piece.colour, piece_array)
		if additional_flag and additional_flag == "STALEMATE" then
			current_state = GAME_STATE.STALEMATE
			print("GAME OVER! Stalemate")
			
		-- If it's game over is true and it's white's turn then black wins, and the opposite applies
		elseif game_over and current_state == GAME_STATE.TURN_WHITE then
			current_state = GAME_STATE.WIN_BLACK
			print("BLACK WINS!")
			
		elseif game_over and current_state == GAME_STATE.TURN_BLACK then
			current_state = GAME_STATE.WIN_WHITE
			print("WHITE WINS!")
		end
		

	end

	show(piece_array)	
	
	return
end


-- [[ Helper Functions ]]
function show(piece_array)
	local row_str = ""
	for x = 1, 8 do
		for y = 1, 8 do
			if piece_array[x][y] ~= nil then
				row_str = row_str .. piece_array[x][y].name .. ", "
			else
				row_str = row_str .. "  " .. ", "
			end
		end
		print(row_str)
		row_str = ""
	end
	return
end


-- Validation helper function(s)
function get_piece_location(go_id)
	local move_from = {}

	-- Get piece
	for x = 1, 8 do
		for y = 1, 8 do
			if piece_array[x][y] ~= nil then
				if piece_array[x][y].id == go_id then
					move_from = {x, y}
				end
			end
		end
	end

	return move_from
end


function is_checkmate_or_stalemate(piece_colour, piece_array)
	local game_over
	
	local enemy_colour = "w"
	if piece_colour == "w" then
		enemy_colour = "b"
	end

	local enemy_king = get_king(enemy_colour, piece_array)

	-- Check if the enemy king is now in check
	local our_piece, our_piece_flag
	for x = 1, 8 do 
		for y = 1, 8 do
			our_piece = piece_array[x][y]

			if our_piece ~= nil and our_piece.colour == piece_colour then
				
				our_piece_valid, our_piece_flag = our_piece:isValid(enemy_king.pos, piece_array)
				if our_piece_valid and our_piece_flag == "capture" then
					enemy_king.isChecked = true
					goto is_checked
				end
			end
		end
	end

	::is_checked::
	
	if not enemy_king.isChecked then
		print("The " .. enemy_colour .. " king is not threatend")
		-- Stalemate if king has 0 valid moves and all his pieces have 0 valid moves
		local all_pieces_moves
		if table.getn(enemy_king:get_valid_moves(piece_array)) == 0 then

			-- Do all pieces of that colour have 0 valid moves? stalemate if yes
			game_over = true
			local _piece
			for x = 1, 8 do
				for y = 1, 8 do 
					_piece = piece_array[x][y]
					if _piece and _piece.colour == enemy_colour then
						if (#_piece:get_valid_moves(piece_array)) ~= 0 then -- get the length with '#'
							game_over = false
							break
						end
					end
				end
			end
			
			if game_over then
				return true, "STALEMATE"
			end
			
		end
		
		return false
	-- end
	
	elseif table.getn(enemy_king:get_valid_moves(piece_array)) > 0 then
		print("The king can escape")
		return false
	end

	-- Reach this point means that the enemy king is checked and has no valid moves to exit check
	local enemy_piece
	local game_over = true
	
	for x = 1, 8 do
		for y = 1, 8 do
			enemy_piece = piece_array[x][y]
			if enemy_piece ~= nil and enemy_piece.colour == enemy_king.colour then
				local piece_moves = enemy_piece:get_valid_moves(piece_array)
				if (#piece_moves) > 0 then 
					print("NOT GAME OVER YET")
					return false
				end
			end
		end
	end

	print("GAME OVER!")
	return true
end


function get_turn(current_state, valid, piece_colour)
	if current_state == GAME_STATE.STALEMATE then
		valid = false

	elseif current_state == GAME_STATE.WIN_WHITE or current_state == GAME_STATE.WIN_BLACK then
		valid = false
	
	elseif current_state == GAME_STATE.TURN_WHITE then
		-- If a (W)HITE piece is trying to make a valid move then allow it
		valid = piece_colour == "w" and valid

		if valid then
			current_state = GAME_STATE.TURN_BLACK
		end

	elseif current_state == GAME_STATE.TURN_BLACK then

		-- If a (B)LACK piece is trying to make a valid move then allow it
		valid = piece_colour == "b" and valid
		
		if valid then
			current_state = GAME_STATE.TURN_WHITE
		end
	end
	
	return current_state, valid
end
