require "utils-module.utils"
require "piece.piece"

COLOURS = {"black", "white"}
SQUARE_SIZE = 250
SCALE = 0.45
SPRITE_SIZE = 500

piece_names = {"king", "queen", "rook", "bishop", "knight", "pawn"}
first_rank_pieces = {"rook", "knight", "bishop", "queen", "king", "bishop", "knight", "rook"}
piece_array = {}

function init(self)

	-- Set up the array
	for i = 1, 8 do
		piece_array[i] = {}
	end

	-- setup random seed for later
	math.randomseed(os.time())

	-- Initial piece setup 
	local props
	local piece_id
	-- Iterate over the pieces and create the first rank for black and white respectively
	local r_pos = vmath.vector3()

	for _, colour in ipairs(COLOURS) do
		for i, piece_name in ipairs(first_rank_pieces) do

			-- Set the piece position, for white and black
			r_pos.x = utils.get_px_from(i)
			if colour == "white" then
				r_pos.y = utils.get_px_from(1) -- Y as the 1st rank from the bottom (0th Index hence 0.5)
			else
				r_pos.y = utils.get_px_from(8) -- Y as the 8th rank from the bottom (7th Index)
			end

			-- Set the piece object property to be the pi
			props = { name=hash(piece_name..colour) }
			piece_id = factory.create("#piece_factory", r_pos, nil, props)

			-- Set the sprite 'animation' (image) scale
			go.set_scale(SCALE, piece_id)
			
			-- Set the animation (image) by (name + colour)
			msg.post(piece_id, "play_animation", { id=hash("chess-"..piece_name.."-"..colour) })

			-- Set up piece array representation
			local p_name = string.sub(piece_name, 1, 1) .. string.sub(colour, 1, 1)
			
			-- So that knight is represented as 'nw' or 'nb'
			if piece_name == "knight" then
				p_name = string.sub(piece_name, 2, 2) .. string.sub(colour, 1, 1)
			end

			if colour == "black" then
				piece_array[1][i] = {id=piece_id, name=p_name}
			else
				piece_array[8][i] = {id=piece_id, name=p_name}
			end
		end
	end

	-- Add the pawns for white and black 1 to 8 inclusive
	for _, colour in ipairs(COLOURS) do
		for i = 1, 8 do
			-- Set the position
			r_pos.x = utils.get_px_from(i)
			r_pos.y = utils.get_px_from(2) -- Y as the 2nd rank (1st Index) 
			if colour == "black" then
				r_pos.y = utils.get_px_from(7) -- Y as the 7th rank (and 6th Index)
			end

			-- Set the property
			props = {name=hash("pawn" .. colour)}
			piece_id = factory.create("#piece_factory", r_pos, nil, props)

			-- Set the scale for the pawn(s)
			go.set_scale(SCALE - 0.04, piece_id)
			
			-- Set the animation (except for black as the default animation/image is a black pawn)
			msg.post(piece_id, "play_animation", { id=hash("chess-".."pawn".."-"..colour)})

			-- Fill the underlying array that will represent the game state
			local p_name = "p" .. string.sub(colour, 1, 1)  -- Name will be "pb" or "pw"
			if colour == "black" then
				piece_array[2][i] = {id=piece_id, name=p_name}
			else
				piece_array[7][i] = {id=piece_id, name=p_name}
			end
		end
	end

	msg.post("/go_board#main", "piece_array", {id=piece_array})
	
end

